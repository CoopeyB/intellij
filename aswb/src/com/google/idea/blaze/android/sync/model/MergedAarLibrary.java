/*
 * Copyright 2021 The Bazel Authors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.idea.blaze.android.sync.model;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import com.google.devtools.intellij.model.ProjectData;
import com.google.idea.blaze.android.libraries.UnpackedAars;
import com.google.idea.blaze.base.ideinfo.ProtoWrapper;
import com.google.idea.blaze.base.model.BlazeLibrary;
import com.google.idea.blaze.base.model.LibraryKey;
import com.google.idea.blaze.base.sync.workspace.ArtifactLocationDecoder;
import com.google.idea.common.experiments.BoolExperiment;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.roots.OrderRootType;
import com.intellij.openapi.roots.libraries.Library.ModifiableModel;
import com.intellij.openapi.util.text.StringUtil;
import java.io.File;
import java.util.Objects;
import java.util.UUID;
import java.util.stream.Collectors;
import org.jetbrains.annotations.Nullable;

/**
 * A library corresponding to multiple AAR files that shares the same package name.
 *
 * <p>Due to the structure of google data, one project may have multiple resources comes from
 * different aar library but share same resource package name. It increases the amount of project
 * aar libraries and may lead to freeze(KTIJ-11618). This class is used to merge such aar libraries
 * as one library to avoid potential freeze.
 */
public class MergedAarLibrary extends BlazeLibrary {
  private static final Logger logger = Logger.getInstance(MergedAarLibrary.class);

  @VisibleForTesting
  public static final BoolExperiment exportResourcePackage =
      new BoolExperiment("aswb.aarlibrary.export.res.package", true);

  public static final BoolExperiment mergeAarLibraries =
      new BoolExperiment("aswb.aarlibrary.merge", true);

  // resourcePackage is used to set the resource package of the corresponding ExternalLibrary
  // generated by BlazeModuleSystem. Setting resourcePackage to null will create an ExternalLibrary
  // that doesn't have its resource package set.
  //
  // resourcePackage is null when we don't want to export a resource package for the Aar. This would
  // be either if `exportResourcePackage` is turned off, or if there's an issue trying to infer
  // package of the Aar.
  @Nullable private final String resourcePackage;
  public final ImmutableList<AarLibrary> aars;

  public MergedAarLibrary(@Nullable String resourcePackage, ImmutableList<AarLibrary> aars) {
    this(generateLibraryKey(resourcePackage, aars), resourcePackage, aars);
  }

  private MergedAarLibrary(
      LibraryKey key, @Nullable String resourcePackage, ImmutableList<AarLibrary> aars) {
    super(key);
    this.resourcePackage = resourcePackage;
    this.aars = aars;
  }

  private static LibraryKey generateLibraryKey(
      @Nullable String resourcePackage, ImmutableList<AarLibrary> aars) {
    if (mergeAarLibraries.getValue() && resourcePackage != null) {
      return LibraryKey.fromIntelliJLibraryName(resourcePackage);
    }

    if (!aars.isEmpty()) {
      return aars.get(0).key;
    }
    // It should not happened since we expect at least one aar is provided
    logger.warn(
        "Unexpeced aar library is created : resourcePackage ="
            + resourcePackage
            + ", aars ="
            + aars
            + ", mergeAarLibraries.getValue()= "
            + mergeAarLibraries.getValue());
    return LibraryKey.fromIntelliJLibraryName(
        resourcePackage == null ? "MergedAar_" + UUID.randomUUID() : resourcePackage);
  }

  @Nullable
  public String getResourcePackage() {
    return !exportResourcePackage.getValue() ? null : resourcePackage;
  }

  public boolean useSingleAar() {
    return !mergeAarLibraries.getValue() || aars.size() == 1;
  }

  @Override
  public void modifyLibraryModel(
      Project project,
      ArtifactLocationDecoder artifactLocationDecoder,
      ModifiableModel libraryModel) {
    if (aars.isEmpty()) {
      return;
    }
    if (useSingleAar()) {
      aars.get(0).modifyLibraryModel(project, artifactLocationDecoder, libraryModel);
      return;
    }

    UnpackedAars unpackedAars = UnpackedAars.getInstance(project);

    File resourceDirectory = unpackedAars.getResourceDirectory(artifactLocationDecoder, this);
    if (resourceDirectory == null) {
      logger.warn("No resource directory found for aar: " + this);
      return;
    }
    libraryModel.addRoot(pathToUrl(resourceDirectory), OrderRootType.CLASSES);
    // Do not add class jar if there are more than one aars since only aars generated by aspect file
    // need to be merged. And they do nt have any class jar. For other aars imported by users, they
    // must have unique package name i.e. they should not be merged.
  }

  static MergedAarLibrary fromProto(ProjectData.BlazeLibrary proto) {
    // we may get such library when user get update first time. The proto is still AarLibrary not
    // MergedAarLibrary. We will convert AarLibrary to MergedAarLibrary with single AarLibrary. The
    // acutal merge will happen until next sync.
    if (proto.hasAarLibrary()) {
      ProjectData.AarLibrary aarLibrary = proto.getAarLibrary();
      return new MergedAarLibrary(
          LibraryKey.fromProto(proto.getLibraryKey()),
          aarLibrary.getResourcePackage(),
          ImmutableList.of(AarLibrary.fromAarLibraryProto(proto.getAarLibrary())));
    }

    ProjectData.MergedAarLibrary mergedAarLibrary = proto.getMergedAarLibrary();
    return new MergedAarLibrary(
        mergedAarLibrary.getResourcePackage(),
        ProtoWrapper.map(mergedAarLibrary.getAarsList(), AarLibrary::fromAarLibraryProto));
  }

  @Override
  public ProjectData.BlazeLibrary toProto() {
    ProjectData.MergedAarLibrary.Builder mergedAarLibraryBuilder =
        ProjectData.MergedAarLibrary.newBuilder();
    if (!StringUtil.isEmpty(resourcePackage)) {
      mergedAarLibraryBuilder.setResourcePackage(resourcePackage);
    }
    mergedAarLibraryBuilder.addAllAars(ProtoWrapper.map(aars, AarLibrary::toAarLibraryProto));
    return super.toProto().toBuilder().setMergedAarLibrary(mergedAarLibraryBuilder.build()).build();
  }

  @Override
  public String toString() {
    return "MergedAarLibrary = { reosurcePackageName = "
        + resourcePackage
        + ", aars = "
        + aars.stream().map(lib -> lib.aarArtifact.toString()).collect(Collectors.toSet())
        + "}";
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) {
      return true;
    }
    if (!(other instanceof MergedAarLibrary)) {
      return false;
    }

    MergedAarLibrary that = (MergedAarLibrary) other;
    return super.equals(other)
        && Objects.equals(this.aars, that.aars)
        && this.resourcePackage.equals(that.resourcePackage);
  }

  /** Builder for {@link MergedAarLibrary} */
  public static class Builder {
    @Nullable private String resourcePackage;
    public ImmutableList.Builder<AarLibrary> aarsBuilder = ImmutableList.builder();

    /**
     * Return a {@link LibraryKey} computed from {@code resourcePackage} if merged aar library
     * feature is enabled and {@code resourcePackage} is available. Otherwise, use {@link
     * AarLibrary#key}
     */
    public static LibraryKey computeLibraryKey(@Nullable String resourcePackage, AarLibrary aar) {
      return (mergeAarLibraries.getValue() && resourcePackage != null)
          ? LibraryKey.fromIntelliJLibraryName(resourcePackage)
          : aar.key;
    }

    public Builder addAar(AarLibrary aar) {
      aarsBuilder.add(aar);
      return this;
    }

    public Builder setResourcePackage(String resourcePackage) {
      this.resourcePackage = resourcePackage;
      return this;
    }

    public MergedAarLibrary build() {
      return new MergedAarLibrary(resourcePackage, aarsBuilder.build());
    }
  }
}
